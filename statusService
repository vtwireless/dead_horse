#!/usr/bin/env node

var Connection = require('ssh2');
var totalNodes=48;
var ipNumbersStartFrom=11;
var IPsEnd=ipNumbersStartFrom+totalNodes;
var results={};
var Barrier = function (callback) {
    var count = 0;
    var reached = false;

    this.add = function () {
        if (reached)
            throw new Error("attempting to expand already reached barrier");

        count++;

        return {
            finish: function () {
                count--;
                if (count == 0) {
                    reached = true;
                    callback();
                }
            }
        }
    }
};


function sshTo(host, user, pass, command, b){
	var c = new Connection();
	var activity = b.add();
	c.on('ready', function() {
	  console.log('Connection :: ready');
	  c.exec(command, function(err, stream) {
	    if (err) throw err;
	    stream.on('data', function(data, extended) {
	      results[host]=1;
	      console.log('HOST:' + host + ' ' + (extended === 'stderr' ? 'STDERR: ' : 'STDOUT: ')+data);
	      //results[host]='HOST:' + host + ' ' + (extended === 'stderr' ? 'STDERR: ' : 'STDOUT: ')+data;
	      if(!(extended === 'stderr')){      
		results[host]=2;
	      } 
	    });
	    stream.on('end', function() {
	      console.log('Stream :: EOF');
	    });
	    stream.on('close', function() {
	      console.log('Stream :: close');
	    });
	    stream.on('exit', function(code, signal) {
	      console.log('Stream :: exit :: code: ' + code + ', signal: ' + signal);
	      c.end();
	    });
	  });
	});
	c.on('error', function(err) {
	  console.log('Connection :: error :: ' + err);
	});
	c.on('end', function() {
	  console.log('Connection :: end');
	});
	c.on('close', function(had_error) {
	  console.log('Connection :: close ' + host);
	  activity.finish();
	});
	c.connect({
	  host: host,
	  port: 22,
      username: process.env.LOGNAME,
      privateKey: require('fs').readFileSync(process.env.HOME+'/.ssh/id_rsa')
	});
}

// Load the http module to create an http server.
var http = require('http');
var url = require('url');

// Configure our HTTP server to respond with Hello World to all requests.
var server = http.createServer(function (request, response) {
 
    var pathname = url.parse(request.url).pathname;

    console.log('request pathname=' + pathname);

    if(pathname !== '/crts_status_xxx') {
        response.end('Bad request');
        return;
    }

    var b = new Barrier(function() {
	    console.log("Barrier reached");
	    var arrayResults=[];
        // make the first 12 nodes look like failures
        var skip = 0;
	    for (var key in results) {
            if(skip !== 0) { results[key] = 1; --skip; }
		    console.log(key, results[key] + '\r\n');
	    	arrayResults.push(results[key]);
	    }
	    var url_parts = url.parse(request.url, true);
	    var cb = url_parts.query.callback;
	    response.writeHead(200, {"Content-Type": "text/html"});
	    response.end(cb+'('+JSON.stringify(arrayResults)+')');
	    console.log(url_parts);
            console.log(cb+'('+JSON.stringify(arrayResults)+')');
            console.log(response.end);
	    console.log(response);
	});

	// initialize the results
	for (var i=ipNumbersStartFrom; i<IPsEnd; i++)
		results['192.168.1.'+i]=0;

	results['192.168.1.11']=0;
	results['192.168.1.12']=0;
	results['192.168.1.13']=0;
	results['192.168.1.14']=0;
	results['192.168.1.15']=0;
	results['192.168.1.16']=0;
	results['192.168.1.17']=0;
	results['192.168.1.18']=0;
	results['192.168.1.19']=0;
	results['192.168.1.20']=0;
	results['192.168.1.21']=0;
	results['192.168.1.22']=0;
	results['192.168.1.23']=0;
	results['192.168.1.24']=0;
	results['192.168.1.25']=0;
	results['192.168.1.26']=0;
	results['192.168.1.27']=0;
	results['192.168.1.28']=0;
	results['192.168.1.29']=0;
	results['192.168.1.30']=0;
	results['192.168.1.31']=0;
	results['192.168.1.32']=0;
	results['192.168.1.33']=0;
	results['192.168.1.34']=0;
	results['192.168.1.35']=0;
	results['192.168.1.36']=0;
//	results['192.168.1.44']=1;
//	results['192.168.1.45']=1;
//	results['192.168.1.46']=1;
//	results['192.168.1.47']=1;
//	results['192.168.1.48']=1;
//	results['192.168.1.49']=1;
//	results['192.168.1.50']=1;
//	results['192.168.1.51']=1;
//	results['192.168.1.52']=1;
//	results['192.168.1.53']=1;
//	results['192.168.1.54']=1;
//	results['192.168.1.55']=1;
//	results['192.168.1.56']=1;
//	results['192.168.1.57']=1;
//	results['192.168.1.58']=1;





	   //for (var i=ipNumbersStartFrom; i<IPsEnd; i++)
        sshTo('192.168.1.37','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.38','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.39','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.40','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.41','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.42','user','pass',  'uhd_find_devices', b);
        sshTo('192.168.1.43','user','pass',  'uhd_find_devices', b);
	





});


server.listen(8893);

// TODO: get IP address or domain name at runtime.
console.log("\nTry:  http://128.173.221.40:8893/crts_status_xxx\n\n");

